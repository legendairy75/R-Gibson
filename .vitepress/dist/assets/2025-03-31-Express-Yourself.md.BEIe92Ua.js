import{_ as e,c as i,o as a,ae as t}from"./chunks/framework.Dh1jimFm.js";const c=JSON.parse('{"title":"Express(.js) Yourself","description":"","frontmatter":{},"headers":[],"relativePath":"2025-03-31-Express-Yourself.md","filePath":"2025-03-31-Express-Yourself.md","lastUpdated":null}'),n={name:"2025-03-31-Express-Yourself.md"};function l(h,s,r,p,o,d){return a(),i("div",null,s[0]||(s[0]=[t(`<h1 id="express-js-yourself" tabindex="-1">Express(.js) Yourself <a class="header-anchor" href="#express-js-yourself" aria-label="Permalink to &quot;Express(.js) Yourself&quot;">​</a></h1><p>In the world of web development there are many things to learn, on of such things is expressjs</p><ul><li>express is a fast, unopinionated, minimalistic web framework for node Its primary use is for routing, allowing you to connect pages and scripts. for instance:</li></ul><p>Express has 5 main features:</p><ul><li>routing: how an app responds to a request</li><li>middle ware: functions that can access request and response</li><li>timplating language: for generating static sites</li><li>extensible: using middle ware to customize the functions of the app</li><li>error handling: stopping an error from crashing an app</li></ul><hr><h2 id="routing" tabindex="-1">Routing <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;Routing&quot;">​</a></h2><p>if your on facebook.com and click the &#39;profile&#39; button you get directed to a new page, that page being something like facebook.com/profile. behind the seen express sees &#39;facebook.com&#39; as &#39;/&#39;,the &#39;home&#39; page and facebook.com/profile as /profile. then in the home page the &#39;profile&#39; button links to /profile and when you click it express looks through its list of routs till it finds one with the right name, then executes the function in it.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*file name*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>In this example, <code>app.get</code> tells Express to render <em>file name</em> when directed to <code>&#39;/&#39;</code>.</p><h2 id="middleware" tabindex="-1">Middleware <a class="header-anchor" href="#middleware" aria-label="Permalink to &quot;Middleware&quot;">​</a></h2><p>Middleware are functions that have access to the request and response objects and next function witch exicutes the next middleware after it.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> middleware</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code here</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Then you can use it in your routs</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, middleware, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Or load it every time the app receives a request with \`app.use(middleware);</p><h2 id="template-language" tabindex="-1">Template language <a class="header-anchor" href="#template-language" aria-label="Permalink to &quot;Template language&quot;">​</a></h2><p>A template language uses javascript to create a <em>timplate</em> for dinamic content that renders as html. There are many template languages like Pug and handlebars, but most use Embeded Javascript Timplate, or (EJS).</p><h2 id="extensible" tabindex="-1">Extensible <a class="header-anchor" href="#extensible" aria-label="Permalink to &quot;Extensible&quot;">​</a></h2><p>With middleware expresses functionality can be extended, for example if I had middleware like this</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> helloWorld</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>I could then place it in my main rout like this</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, helloWorld, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get recieved&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>Then when I go to <code>/</code> and look at the console I would see &#39;Hello World&#39; printed out followed by &#39;get recieved&#39;. you can make more practical functions with midle ware and well liik at a few ina bit.</p><h2 id="error-handling" tabindex="-1">Error handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error handling&quot;">​</a></h2><p>This is how express catches &amp; handles errors, It basically operates as a middleware on its own but using the <code>(err, req, res, next)</code> inputs rather than <code>(req, res, next)</code>.</p><hr><h2 id="beerme-2" tabindex="-1">Beerme(2) <a class="header-anchor" href="#beerme-2" aria-label="Permalink to &quot;Beerme(2)&quot;">​</a></h2><p>Now that you know a little about express let me show it to you in action with my web-app Beerme. Beerme is built off of express using ejs as the template engine. when I first built beerme I built it from scratch compleating it within a week, then when I deployed it it kept runnung into errors, frustrated I decided to rebuild using the express genorator so that I didnt have to start from scratch again. I am telling you this only because of the way the express genorator structures your application, usualy when you run <code>npm dev</code> your actualy running <code>node app.js</code> (a subject for another time), with the generated express app <code>npm dev</code> runns <code>node ./bin/www</code>.</p><hr><h2 id="process" tabindex="-1">Process <a class="header-anchor" href="#process" aria-label="Permalink to &quot;Process&quot;">​</a></h2><p>Now in express there are 7 stages that the cliant and server go through to send and recive information</p><ol><li>Cliant request</li><li>server determins what rout to use for req</li><li>server exicutes middleware</li><li>rout handler is exicuted</li><li>server generates a responce</li><li>server sends re to cliant</li><li>cliant processes responce</li></ol><h3 id="request" tabindex="-1">Request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;Request&quot;">​</a></h3><h3 id="server-reserve" tabindex="-1">Server reserve <a class="header-anchor" href="#server-reserve" aria-label="Permalink to &quot;Server reserve&quot;">​</a></h3><h3 id="middleware-1" tabindex="-1">Middleware <a class="header-anchor" href="#middleware-1" aria-label="Permalink to &quot;Middleware&quot;">​</a></h3><h3 id="rout-handler" tabindex="-1">Rout handler <a class="header-anchor" href="#rout-handler" aria-label="Permalink to &quot;Rout handler&quot;">​</a></h3><h3 id="responce" tabindex="-1">Responce <a class="header-anchor" href="#responce" aria-label="Permalink to &quot;Responce&quot;">​</a></h3><h3 id="send" tabindex="-1">Send <a class="header-anchor" href="#send" aria-label="Permalink to &quot;Send&quot;">​</a></h3><h3 id="cliant-reserve" tabindex="-1">Cliant reserve <a class="header-anchor" href="#cliant-reserve" aria-label="Permalink to &quot;Cliant reserve&quot;">​</a></h3><hr><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>Express is a nodejs fraimwork that is lightwaight and extensible with the esintial tools needed for a website and the ability to add and build yourown through middleware</p>`,43)]))}const E=e(n,[["render",l]]);export{c as __pageData,E as default};
